// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4930.JonBot2018.subsystems;


import org.usfirst.frc4930.JonBot2018.commands.TankDrive;
import org.usfirst.frc4930.JonBot2018.Robot;
import org.usfirst.frc4930.JonBot2018.RobotMap;
import edu.wpi.first.wpilibj.command.Subsystem;

import com.ctre.phoenix.motorcontrol.ControlMode;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class DriveTrain extends Subsystem {



    @Override
    public void initDefaultCommand() {
  //  	 setDefaultCommand(new TankDrive());
    }

    public void tankMove(double left, double right) {
    	RobotMap.dtTankMasterMotors.tankDrive(left, right, false);
    }
    
    public void tankDrive(){
    	double left = Robot.oi.j0.getY();
    	double right = Robot.oi.j1.getY();
    	tankMove(left, right);
    	
    }
    
    public void tankStop() {
    	RobotMap.dtTankMasterMotors.stopMotor();
    }
    
	public void mecanumMove(double x, double y, double z ){
	    RobotMap.dtMecanumMasterMotors.driveCartesian(x, y, z);
	}
	
	public void mecanumDrive() {
    	double xSpeed = Robot.oi.j0.getX();
    	double ySpeed = -(Robot.oi.j0.getY());      
        double zRotation = Robot.oi.j0.getZ();
  
        mecanumMove(xSpeed, ySpeed, zRotation);
     
	}
	
	public void mecanumStop() {
		RobotMap.dtMecanumMasterMotors.stopMotor();
	}
	
	public void setPosition(double position){
		RobotMap.dtLBMaster.config_kP(0, 0.1, 100);
		RobotMap.dtLBMaster.config_kI(0, 0.0, 100);
		RobotMap.dtLBMaster.config_kD(0, 0.1, 100);
		
		RobotMap.dtLFMaster.config_kP(0, 0.1, 100);
		RobotMap.dtLFMaster.config_kI(0, 0.0, 100);
		RobotMap.dtLFMaster.config_kD(0, 0.1, 100);
		
		RobotMap.dtRBMaster.config_kP(0, 10.0, 100);
		RobotMap.dtRBMaster.config_kI(0, 0.0, 100);
		RobotMap.dtRBMaster.config_kD(0, 0.1, 100);
		
		RobotMap.dtRFMaster.config_kP(0, 10.0, 100);
		RobotMap.dtRFMaster.config_kI(0, 0.0, 100);
		RobotMap.dtRFMaster.config_kD(0, 0.1, 100);
		
		RobotMap.dtRFMaster.set(ControlMode.Position, position);
	}
}

