// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4930.JonBot2018;

import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.TimedRobot;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.Scheduler;
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SendableChooser;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;
import org.usfirst.frc4930.JonBot2018.commands.*;
import org.usfirst.frc4930.JonBot2018.subsystems.*;

import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;

/**
 * The VM is configured to automatically run this class, and to call the
 * functions corresponding to each mode, as described in the TimedRobot
 * documentation. If you change the name of this class or the package after
 * creating this project, you must also update the build.properties file in 
 * the project.
 */
public class Robot extends TimedRobot {

    Command autonomousCommand;
    SendableChooser<Command> chooser = new SendableChooser<>();
//    public static WPI_TalonSRX testMotor;
    public static WPI_TalonSRX dtRFMaster;
    public static WPI_TalonSRX dtRBMaster;
    public static WPI_TalonSRX dtLFMaster;
    public static WPI_TalonSRX dtLBMaster;
    
    public Joystick j0;
    public static OI oi;
   
    public static DriveTrain driveTrain;
    public static Potentiometer potentiometer;
    public static LimitSwitch limitSwitch;

    /**
     * This function is run when the robot is first started up and should be
     * used for any initialization code.
     */
    @Override
    public void robotInit() {
        RobotMap.init();

        driveTrain = new DriveTrain();
        potentiometer = new Potentiometer();
        limitSwitch = new LimitSwitch();
        oi = new OI();

        // Add commands to Autonomous Sendable Chooser
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS

        chooser.addDefault("Autonomous Command", new AutonomousCommand());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
        SmartDashboard.putData("Auto mode", chooser);
    }

    /**
     * This function is called when the disabled button is hit.
     * You can use it to reset subsystems before shutting down.
     */
    @Override
    public void disabledInit(){

    }

    @Override
    public void disabledPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void autonomousInit() {
        autonomousCommand = chooser.getSelected();
        // schedule the autonomous command (example)
        if (autonomousCommand != null) autonomousCommand.start();
    }

    /**
     * This function is called periodically during autonomous
     */
    @Override
    public void autonomousPeriodic() {
        Scheduler.getInstance().run();
    }

    @Override
    public void teleopInit() {
        // This makes sure that the autonomous stops running when
        // teleop starts running. If you want the autonomous to
        // continue until interrupted by another command, remove
        // this line or comment it out.
        if (autonomousCommand != null) autonomousCommand.cancel();
       
      //  Robot.dtRFMaster = new WPI_TalonSRX(28);       
      //  Robot.dtRBMaster = new WPI_TalonSRX(26);
      //  Robot.dtLFMaster = new WPI_TalonSRX(27);
        RobotMap.dtRBMaster.setSelectedSensorPosition(0, 0, 100);
        RobotMap.dtRFMaster.setSelectedSensorPosition(0, 0, 100);
        RobotMap.dtLFMaster.setSelectedSensorPosition(0, 0, 100);
        RobotMap.dtLBMaster.setSelectedSensorPosition(0, 0, 100);
        j0 = new Joystick(0);
    }

    /**
     * This function is called periodically during operator control
     */
    @Override
    public void teleopPeriodic() {
        Scheduler.getInstance().run();
    //    Robot.dtLBMaster.set(0.4);
   //    RobotMap.leftMaster.set(0.4);
    //    RobotMap.rightMaster.set(0.4);
   //     RobotMap.dtTankMasterMotors.tankDrive(0.4, 0.4, false);
       Robot.driveTrain.tankMove(0.4, 0.4);
   //     Robot.driveTrain.tankDrive();
   //     Robot.driveTrain.mecanumDrive();
        
     //   Robot.driveTrain.tankMove(Robot.potentiometer.getNum(), Robot.potentiometer.getNum());
     //   Robot.potentiometer.stop(4);
    //   RobotMap.dtLBMaster.set(0.3);
      
    //    RobotMap.dtRBMaster.set(Robot.oi.j0.getY());
        
        
        
      //  Robot.driveTrain.setPosition(1000);
        SmartDashboard.putNumber("Pot value: ", Robot.potentiometer.getDegree()); 
        SmartDashboard.putNumber("Degree Value: ", Robot.potentiometer.getNum());
        SmartDashboard.putBoolean("LimitSwitch: ", Robot.limitSwitch.getPosition());
        SmartDashboard.putNumber("Right Front Master Encoder: ", RobotMap.dtRFMaster.getSelectedSensorPosition(0));
        SmartDashboard.putNumber("Right Back Master Encoder: ", RobotMap.dtRBMaster.getSelectedSensorPosition(0));
        SmartDashboard.putNumber("Left Front Master Encoder: ", RobotMap.dtLFMaster.getSelectedSensorPosition(0));
      
        SmartDashboard.putNumber("Left Back Encoder: ", RobotMap.dtLBMaster.getSelectedSensorPosition(0));
        SmartDashboard.putString("LB MODE: ", RobotMap.dtLBMaster.getControlMode().toString());
        SmartDashboard.putNumber("LB QUAD: ", RobotMap.dtLBMaster.getSensorCollection().getAnalogIn());
        SmartDashboard.putNumber("RB QUAD: ", RobotMap.dtRBMaster.getSensorCollection().getAnalogIn());
        
        System.out.println(RobotMap.dtLBMaster.getSensorCollection().getQuadraturePosition());

    }
    public void testInit() {
    			
    }
    public void testPeriodic() {
    	
    }
}
